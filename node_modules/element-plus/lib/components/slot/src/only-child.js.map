{"version":3,"file":"only-child.js","sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  cloneVNode,\n  Comment,\n  defineComponent,\n  Fragment,\n  Text,\n  withDirectives,\n  inject,\n} from 'vue'\nimport { NOOP, isObject } from '@vue/shared'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { VNode, Ref } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined): VNode | null {\n  if (!node) return null\n  const children = node as VNode[]\n  for (let i = 0; i < children.length; i++) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    const child = children[i]\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n          return wrapTextContent(child)\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  return <span class=\"el-only-child__content\">{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"],"names":["NAME","OnlyChild","defineComponent","name","setup","slots","attrs","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","debugWarn","firstLegitNode","findFirstLegitChild","defaultSlot","children","isObject"],"mappings":";;;;;;;;;;;AAkBA,MAAMA,IAAI,GAAG,aAAb;MAEaC,SAAS,GAAGC,mBAAe,CAAC;AACvCC,EAAAA,IAAI,EAAEH,IADiC;;AAEvCI,SAAK;AAAMC,IAAAA,KAAF;AAASC;AAAT;AACP,UAAMC,mBAAmB,GAAGC,UAAM,CAACC,+BAAD,CAAlC;AACA,UAAMC,mBAAmB,GAAGC,4BAAsB,CAChDJ,0CADgD;AAGlD,WAAO,MAAM;AACX;AACA;;AAEA;AACEK,sBAAS;AACT;AACD;;AAED,YAAMC,cAAc,GAAGC,mBAAmB,CAACC,WAAD,CAA1C;;AACA;AACEH,QAAAA;AACA;AACD;;AAED;AAGD;AACF;;AA1BsC;;AA6BzC;AACE;AACA,QAAMI,eAAQ,OAAd;;AACA;AACE;AACJ;AACA;AACA;AACA;AACI;;AACA,QAAIC;AACF;AACE;AACE;;AACF;AACE;;AACF;AACE;;AACF;AACE;;;;"}