{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { ref, getCurrentInstance, watch, nextTick } from 'vue';\nimport { SetOperationEnum, NODE_CHECK, NODE_CHECK_CHANGE } from '../virtual-tree.mjs';\n\nfunction useCheck(props, tree) {\n  var checkedKeys = ref( /* @__PURE__ */new Set());\n  var indeterminateKeys = ref( /* @__PURE__ */new Set());\n\n  var _getCurrentInstance = getCurrentInstance(),\n      emit = _getCurrentInstance.emit;\n\n  watch(function () {\n    return tree.value;\n  }, function () {\n    return nextTick(function () {\n      _setCheckedKeys(props.defaultCheckedKeys);\n    });\n  }, {\n    immediate: true\n  });\n\n  var updateCheckedKeys = function updateCheckedKeys() {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return;\n    }\n\n    var _tree$value = tree.value,\n        levelTreeNodeMap = _tree$value.levelTreeNodeMap,\n        maxLevel = _tree$value.maxLevel;\n    var checkedKeySet = checkedKeys.value;\n    var indeterminateKeySet = /* @__PURE__ */new Set();\n\n    for (var level = maxLevel - 1; level >= 1; --level) {\n      var nodes = levelTreeNodeMap.get(level);\n      if (!nodes) continue;\n      nodes.forEach(function (node) {\n        var children = node.children;\n\n        if (children) {\n          var allChecked = true;\n          var hasChecked = false;\n\n          for (var i = 0; i < children.length; ++i) {\n            var childNode = children[i];\n            var key = childNode.key;\n\n            if (checkedKeySet.has(key)) {\n              hasChecked = true;\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false;\n              hasChecked = true;\n              break;\n            } else {\n              allChecked = false;\n            }\n          }\n\n          if (allChecked) {\n            checkedKeySet.add(node.key);\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key);\n            checkedKeySet[\"delete\"](node.key);\n          } else {\n            checkedKeySet[\"delete\"](node.key);\n            indeterminateKeySet[\"delete\"](node.key);\n          }\n        }\n      });\n    }\n\n    indeterminateKeys.value = indeterminateKeySet;\n  };\n\n  var isChecked = function isChecked(node) {\n    return checkedKeys.value.has(node.key);\n  };\n\n  var isIndeterminate = function isIndeterminate(node) {\n    return indeterminateKeys.value.has(node.key);\n  };\n\n  var toggleCheckbox = function toggleCheckbox(node, isChecked2) {\n    var nodeClick = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var checkedKeySet = checkedKeys.value;\n\n    var toggle = function toggle(node2, checked) {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);\n      var children = node2.children;\n\n      if (!props.checkStrictly && children) {\n        children.forEach(function (childNode) {\n          if (!childNode.disabled) {\n            toggle(childNode, checked);\n          }\n        });\n      }\n    };\n\n    toggle(node, isChecked2);\n    updateCheckedKeys();\n\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked2);\n    }\n  };\n\n  var afterNodeCheck = function afterNodeCheck(node, checked) {\n    var _getChecked = getChecked(),\n        checkedNodes = _getChecked.checkedNodes,\n        checkedKeys2 = _getChecked.checkedKeys;\n\n    var _getHalfChecked = getHalfChecked(),\n        halfCheckedNodes = _getHalfChecked.halfCheckedNodes,\n        halfCheckedKeys = _getHalfChecked.halfCheckedKeys;\n\n    emit(NODE_CHECK, node.data, {\n      checkedKeys: checkedKeys2,\n      checkedNodes: checkedNodes,\n      halfCheckedKeys: halfCheckedKeys,\n      halfCheckedNodes: halfCheckedNodes\n    });\n    emit(NODE_CHECK_CHANGE, node.data, checked);\n  };\n\n  function getCheckedKeys() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return getChecked(leafOnly).checkedKeys;\n  }\n\n  function getCheckedNodes() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return getChecked(leafOnly).checkedNodes;\n  }\n\n  function getHalfCheckedKeys() {\n    return getHalfChecked().halfCheckedKeys;\n  }\n\n  function getHalfCheckedNodes() {\n    return getHalfChecked().halfCheckedNodes;\n  }\n\n  function getChecked() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var checkedNodes = [];\n    var keys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      var treeNodeMap = tree.value.treeNodeMap;\n      checkedKeys.value.forEach(function (key) {\n        var node = treeNodeMap.get(key);\n\n        if (node && (!leafOnly || leafOnly && node.isLeaf)) {\n          keys.push(key);\n          checkedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      checkedKeys: keys,\n      checkedNodes: checkedNodes\n    };\n  }\n\n  function getHalfChecked() {\n    var halfCheckedNodes = [];\n    var halfCheckedKeys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      var treeNodeMap = tree.value.treeNodeMap;\n      indeterminateKeys.value.forEach(function (key) {\n        var node = treeNodeMap.get(key);\n\n        if (node) {\n          halfCheckedKeys.push(key);\n          halfCheckedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      halfCheckedNodes: halfCheckedNodes,\n      halfCheckedKeys: halfCheckedKeys\n    };\n  }\n\n  function setCheckedKeys(keys) {\n    checkedKeys.value.clear();\n\n    _setCheckedKeys(keys);\n  }\n\n  function setChecked(key, isChecked2) {\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      var node = tree.value.treeNodeMap.get(key);\n\n      if (node) {\n        toggleCheckbox(node, isChecked2, false);\n      }\n    }\n  }\n\n  function _setCheckedKeys(keys) {\n    if (tree == null ? void 0 : tree.value) {\n      var treeNodeMap = tree.value.treeNodeMap;\n\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (var i = 0; i < keys.length; ++i) {\n          var key = keys[i];\n          var node = treeNodeMap.get(key);\n\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false);\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    updateCheckedKeys: updateCheckedKeys,\n    toggleCheckbox: toggleCheckbox,\n    isChecked: isChecked,\n    isIndeterminate: isIndeterminate,\n    getCheckedKeys: getCheckedKeys,\n    getCheckedNodes: getCheckedNodes,\n    getHalfCheckedKeys: getHalfCheckedKeys,\n    getHalfCheckedNodes: getHalfCheckedNodes,\n    setChecked: setChecked,\n    setCheckedKeys: setCheckedKeys\n  };\n}\n\nexport { useCheck };","map":{"version":3,"mappings":";;;;;;;;;AAMO,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AACpC,MAAMC,WAAW,GAAGC,GAAG,iBAAiB,IAAIC,GAAJ,EAAjB,CAAvB;AACA,MAAMC,iBAAiB,GAAGF,GAAG,iBAAiB,IAAIC,GAAJ,EAAjB,CAA7B;;AACA,4BAAiBE,kBAAkB,EAAnC;AAAA,MAAQC,IAAR,uBAAQA,IAAR;;AACAC,OAAK,CAAC;AAAA,WAAMP,IAAI,CAACQ,KAAX;AAAA,GAAD,EAAmB,YAAM;AAC5B,WAAOC,QAAQ,CAAC,YAAM;AACpBC,qBAAe,CAACX,KAAK,CAACY,kBAAP,CAAf;AACD,KAFc,CAAf;AAGD,GAJI,EAIF;AACDC,aAAS,EAAE;AADV,GAJE,CAAL;;AAOA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAI,CAACb,IAAI,CAACQ,KAAN,IAAe,CAACT,KAAK,CAACe,YAAtB,IAAsCf,KAAK,CAACgB,aAAhD,EAA+D;AAC7D;AACD;;AACD,sBAAuCf,IAAI,CAACQ,KAA5C;AAAA,QAAQQ,gBAAR,eAAQA,gBAAR;AAAA,QAA0BC,QAA1B,eAA0BA,QAA1B;AACA,QAAMC,aAAa,GAAGjB,WAAW,CAACO,KAAlC;AACA,QAAMW,mBAAmB,kBAAmB,IAAIhB,GAAJ,EAA5C;;AACA,SAAK,IAAIiB,KAAK,GAAGH,QAAQ,GAAG,CAA5B,EAA+BG,KAAK,IAAI,CAAxC,EAA2C,EAAEA,KAA7C,EAAoD;AAClD,UAAMC,KAAK,GAAGL,gBAAgB,CAACM,GAAjB,CAAqBF,KAArB,CAAd;AACA,UAAI,CAACC,KAAL,EACE;AACFA,WAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,YAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;;AACA,YAAIA,QAAJ,EAAc;AACZ,cAAIC,UAAU,GAAG,IAAjB;AACA,cAAIC,UAAU,GAAG,KAAjB;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACxC,gBAAME,SAAS,GAAGL,QAAQ,CAACG,CAAD,CAA1B;AACA,gBAAMG,GAAG,GAAGD,SAAS,CAACC,GAAtB;;AACA,gBAAIb,aAAa,CAACc,GAAd,CAAkBD,GAAlB,CAAJ,EAA4B;AAC1BJ,wBAAU,GAAG,IAAb;AACD,aAFD,MAEO,IAAIR,mBAAmB,CAACa,GAApB,CAAwBD,GAAxB,CAAJ,EAAkC;AACvCL,wBAAU,GAAG,KAAb;AACAC,wBAAU,GAAG,IAAb;AACA;AACD,aAJM,MAIA;AACLD,wBAAU,GAAG,KAAb;AACD;AACF;;AACD,cAAIA,UAAJ,EAAgB;AACdR,yBAAa,CAACe,GAAd,CAAkBT,IAAI,CAACO,GAAvB;AACD,WAFD,MAEO,IAAIJ,UAAJ,EAAgB;AACrBR,+BAAmB,CAACc,GAApB,CAAwBT,IAAI,CAACO,GAA7B;AACAb,yBAAa,UAAb,CAAqBM,IAAI,CAACO,GAA1B;AACD,WAHM,MAGA;AACLb,yBAAa,UAAb,CAAqBM,IAAI,CAACO,GAA1B;AACAZ,+BAAmB,UAAnB,CAA2BK,IAAI,CAACO,GAAhC;AACD;AACF;AACF,OA5BD;AA6BD;;AACD3B,qBAAiB,CAACI,KAAlB,GAA0BW,mBAA1B;AACD,GA1CD;;AA2CA,MAAMe,SAAS,GAAG,SAAZA,SAAY,CAACV,IAAD;AAAA,WAAUvB,WAAW,CAACO,KAAZ,CAAkBwB,GAAlB,CAAsBR,IAAI,CAACO,GAA3B,CAAV;AAAA,GAAlB;;AACA,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACX,IAAD;AAAA,WAAUpB,iBAAiB,CAACI,KAAlB,CAAwBwB,GAAxB,CAA4BR,IAAI,CAACO,GAAjC,CAAV;AAAA,GAAxB;;AACA,MAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACZ,IAAD,EAAOa,UAAP,EAAwC;AAAA,QAArBC,SAAqB,uEAAT,IAAS;AAC7D,QAAMpB,aAAa,GAAGjB,WAAW,CAACO,KAAlC;;AACA,QAAM+B,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACjCvB,mBAAa,CAACuB,OAAO,GAAGC,gBAAgB,CAACC,GAApB,GAA0BD,gBAAgB,CAACE,MAAnD,CAAb,CAAwEJ,KAAK,CAACT,GAA9E;AACA,UAAMN,QAAQ,GAAGe,KAAK,CAACf,QAAvB;;AACA,UAAI,CAAC1B,KAAK,CAACgB,aAAP,IAAwBU,QAA5B,EAAsC;AACpCA,gBAAQ,CAACF,OAAT,CAAiB,UAACO,SAAD,EAAe;AAC9B,cAAI,CAACA,SAAS,CAACe,QAAf,EAAyB;AACvBN,kBAAM,CAACT,SAAD,EAAYW,OAAZ,CAAN;AACD;AACF,SAJD;AAKD;AACF,KAVD;;AAWAF,UAAM,CAACf,IAAD,EAAOa,UAAP,CAAN;AACAxB,qBAAiB;;AACjB,QAAIyB,SAAJ,EAAe;AACbQ,oBAAc,CAACtB,IAAD,EAAOa,UAAP,CAAd;AACD;AACF,GAlBD;;AAmBA,MAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAACtB,IAAD,EAAOiB,OAAP,EAAmB;AACxC,sBAAoDM,UAAU,EAA9D;AAAA,QAAQC,YAAR,eAAQA,YAAR;AAAA,QAAmCC,YAAnC,eAAsBhD,WAAtB;;AACA,0BAA8CiD,cAAc,EAA5D;AAAA,QAAQC,gBAAR,mBAAQA,gBAAR;AAAA,QAA0BC,eAA1B,mBAA0BA,eAA1B;;AACA9C,QAAI,CAAC+C,UAAD,EAAa7B,IAAI,CAAC8B,IAAlB,EAAwB;AAC1BrD,iBAAW,EAAEgD,YADa;AAE1BD,kBAAY,EAAZA,YAF0B;AAG1BI,qBAAe,EAAfA,eAH0B;AAI1BD,sBAAgB,EAAhBA;AAJ0B,KAAxB,CAAJ;AAMA7C,QAAI,CAACiD,iBAAD,EAAoB/B,IAAI,CAAC8B,IAAzB,EAA+Bb,OAA/B,CAAJ;AACD,GAVD;;AAWA,WAASe,cAAT,GAA0C;AAAA,QAAlBC,QAAkB,uEAAP,KAAO;AACxC,WAAOV,UAAU,CAACU,QAAD,CAAV,CAAqBxD,WAA5B;AACD;;AACD,WAASyD,eAAT,GAA2C;AAAA,QAAlBD,QAAkB,uEAAP,KAAO;AACzC,WAAOV,UAAU,CAACU,QAAD,CAAV,CAAqBT,YAA5B;AACD;;AACD,WAASW,kBAAT,GAA8B;AAC5B,WAAOT,cAAc,GAAGE,eAAxB;AACD;;AACD,WAASQ,mBAAT,GAA+B;AAC7B,WAAOV,cAAc,GAAGC,gBAAxB;AACD;;AACD,WAASJ,UAAT,GAAsC;AAAA,QAAlBU,QAAkB,uEAAP,KAAO;AACpC,QAAMT,YAAY,GAAG,EAArB;AACA,QAAMa,IAAI,GAAG,EAAb;;AACA,QAAI,CAAC7D,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACQ,KAA9B,KAAwCT,KAAK,CAACe,YAAlD,EAAgE;AAC9D,UAAQgD,WAAR,GAAwB9D,IAAI,CAACQ,KAA7B,CAAQsD,WAAR;AACA7D,iBAAW,CAACO,KAAZ,CAAkBe,OAAlB,CAA0B,UAACQ,GAAD,EAAS;AACjC,YAAMP,IAAI,GAAGsC,WAAW,CAACxC,GAAZ,CAAgBS,GAAhB,CAAb;;AACA,YAAIP,IAAI,KAAK,CAACiC,QAAD,IAAaA,QAAQ,IAAIjC,IAAI,CAACuC,MAAnC,CAAR,EAAoD;AAClDF,cAAI,CAACG,IAAL,CAAUjC,GAAV;AACAiB,sBAAY,CAACgB,IAAb,CAAkBxC,IAAI,CAAC8B,IAAvB;AACD;AACF,OAND;AAOD;;AACD,WAAO;AACLrD,iBAAW,EAAE4D,IADR;AAELb,kBAAY,EAAZA;AAFK,KAAP;AAID;;AACD,WAASE,cAAT,GAA0B;AACxB,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AACA,QAAI,CAACpD,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACQ,KAA9B,KAAwCT,KAAK,CAACe,YAAlD,EAAgE;AAC9D,UAAQgD,WAAR,GAAwB9D,IAAI,CAACQ,KAA7B,CAAQsD,WAAR;AACA1D,uBAAiB,CAACI,KAAlB,CAAwBe,OAAxB,CAAgC,UAACQ,GAAD,EAAS;AACvC,YAAMP,IAAI,GAAGsC,WAAW,CAACxC,GAAZ,CAAgBS,GAAhB,CAAb;;AACA,YAAIP,IAAJ,EAAU;AACR4B,yBAAe,CAACY,IAAhB,CAAqBjC,GAArB;AACAoB,0BAAgB,CAACa,IAAjB,CAAsBxC,IAAI,CAAC8B,IAA3B;AACD;AACF,OAND;AAOD;;AACD,WAAO;AACLH,sBAAgB,EAAhBA,gBADK;AAELC,qBAAe,EAAfA;AAFK,KAAP;AAID;;AACD,WAASa,cAAT,CAAwBJ,IAAxB,EAA8B;AAC5B5D,eAAW,CAACO,KAAZ,CAAkB0D,KAAlB;;AACAxD,mBAAe,CAACmD,IAAD,CAAf;AACD;;AACD,WAASM,UAAT,CAAoBpC,GAApB,EAAyBM,UAAzB,EAAqC;AACnC,QAAI,CAACrC,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACQ,KAA9B,KAAwCT,KAAK,CAACe,YAAlD,EAAgE;AAC9D,UAAMU,IAAI,GAAGxB,IAAI,CAACQ,KAAL,CAAWsD,WAAX,CAAuBxC,GAAvB,CAA2BS,GAA3B,CAAb;;AACA,UAAIP,IAAJ,EAAU;AACRY,sBAAc,CAACZ,IAAD,EAAOa,UAAP,EAAmB,KAAnB,CAAd;AACD;AACF;AACF;;AACD,WAAS3B,eAAT,CAAyBmD,IAAzB,EAA+B;AAC7B,QAAI7D,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACQ,KAAjC,EAAwC;AACtC,UAAQsD,WAAR,GAAwB9D,IAAI,CAACQ,KAA7B,CAAQsD,WAAR;;AACA,UAAI/D,KAAK,CAACe,YAAN,IAAsBgD,WAAtB,IAAqCD,IAAzC,EAA+C;AAC7C,aAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiC,IAAI,CAAChC,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,cAAMG,GAAG,GAAG8B,IAAI,CAACjC,CAAD,CAAhB;AACA,cAAMJ,IAAI,GAAGsC,WAAW,CAACxC,GAAZ,CAAgBS,GAAhB,CAAb;;AACA,cAAIP,IAAI,IAAI,CAACU,SAAS,CAACV,IAAD,CAAtB,EAA8B;AAC5BY,0BAAc,CAACZ,IAAD,EAAO,IAAP,EAAa,KAAb,CAAd;AACD;AACF;AACF;AACF;AACF;;AACD,SAAO;AACLX,qBAAiB,EAAjBA,iBADK;AAELuB,kBAAc,EAAdA,cAFK;AAGLF,aAAS,EAATA,SAHK;AAILC,mBAAe,EAAfA,eAJK;AAKLqB,kBAAc,EAAdA,cALK;AAMLE,mBAAe,EAAfA,eANK;AAOLC,sBAAkB,EAAlBA,kBAPK;AAQLC,uBAAmB,EAAnBA,mBARK;AASLO,cAAU,EAAVA,UATK;AAULF,kBAAc,EAAdA;AAVK,GAAP;AAYF","names":["useCheck","props","tree","checkedKeys","ref","Set","indeterminateKeys","getCurrentInstance","emit","watch","value","nextTick","_setCheckedKeys","defaultCheckedKeys","immediate","updateCheckedKeys","showCheckbox","checkStrictly","levelTreeNodeMap","maxLevel","checkedKeySet","indeterminateKeySet","level","nodes","get","forEach","node","children","allChecked","hasChecked","i","length","childNode","key","has","add","isChecked","isIndeterminate","toggleCheckbox","isChecked2","nodeClick","toggle","node2","checked","SetOperationEnum","ADD","DELETE","disabled","afterNodeCheck","getChecked","checkedNodes","checkedKeys2","getHalfChecked","halfCheckedNodes","halfCheckedKeys","NODE_CHECK","data","NODE_CHECK_CHANGE","getCheckedKeys","leafOnly","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","keys","treeNodeMap","isLeaf","push","setCheckedKeys","clear","setChecked"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useCheck.ts"],"sourcesContent":["import { nextTick, ref, watch, getCurrentInstance } from 'vue'\nimport {\n  NODE_CHECK_CHANGE,\n  NODE_CHECK,\n  SetOperationEnum,\n} from '../virtual-tree'\nimport type { Ref } from 'vue'\nimport type { TreeProps, TreeKey, TreeNode, Tree, TreeNodeData } from '../types'\n\nexport function useCheck(props: TreeProps, tree: Ref<Tree | undefined>) {\n  const checkedKeys = ref<Set<TreeKey>>(new Set())\n  const indeterminateKeys = ref<Set<TreeKey>>(new Set())\n  const { emit } = getCurrentInstance()!\n\n  watch(\n    () => tree.value,\n    () => {\n      return nextTick(() => {\n        _setCheckedKeys(props.defaultCheckedKeys)\n      })\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  const updateCheckedKeys = () => {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return\n    }\n    const { levelTreeNodeMap, maxLevel } = tree.value\n    const checkedKeySet = checkedKeys.value\n    const indeterminateKeySet = new Set<TreeKey>()\n    // It is easier to determine the indeterminate state by\n    // traversing from bottom to top\n    // leaf nodes not have indeterminate status and can be skipped\n    for (let level = maxLevel - 1; level >= 1; --level) {\n      const nodes = levelTreeNodeMap.get(level)\n      if (!nodes) continue\n      nodes.forEach((node) => {\n        const children = node.children\n        if (children) {\n          // Whether all child nodes are selected\n          let allChecked = true\n          // Whether a child node is selected\n          let hasChecked = false\n          for (let i = 0; i < children.length; ++i) {\n            const childNode = children[i]\n            const key = childNode.key\n            if (checkedKeySet.has(key)) {\n              hasChecked = true\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false\n              hasChecked = true\n              break\n            } else {\n              allChecked = false\n            }\n          }\n          if (allChecked) {\n            checkedKeySet.add(node.key)\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key)\n            checkedKeySet.delete(node.key)\n          } else {\n            checkedKeySet.delete(node.key)\n            indeterminateKeySet.delete(node.key)\n          }\n        }\n      })\n    }\n    indeterminateKeys.value = indeterminateKeySet\n  }\n\n  const isChecked = (node: TreeNode) => checkedKeys.value.has(node.key)\n\n  const isIndeterminate = (node: TreeNode) =>\n    indeterminateKeys.value.has(node.key)\n\n  const toggleCheckbox = (\n    node: TreeNode,\n    isChecked: boolean,\n    nodeClick = true\n  ) => {\n    const checkedKeySet = checkedKeys.value\n    const toggle = (node: TreeNode, checked: boolean) => {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](\n        node.key\n      )\n      const children = node.children\n      if (!props.checkStrictly && children) {\n        children.forEach((childNode) => {\n          if (!childNode.disabled) {\n            toggle(childNode, checked)\n          }\n        })\n      }\n    }\n    toggle(node, isChecked)\n    updateCheckedKeys()\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked)\n    }\n  }\n\n  const afterNodeCheck = (node: TreeNode, checked: boolean) => {\n    const { checkedNodes, checkedKeys } = getChecked()\n    const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked()\n    emit(NODE_CHECK, node.data, {\n      checkedKeys,\n      checkedNodes,\n      halfCheckedKeys,\n      halfCheckedNodes,\n    })\n    emit(NODE_CHECK_CHANGE, node.data, checked)\n  }\n\n  // expose\n  function getCheckedKeys(leafOnly = false): TreeKey[] {\n    return getChecked(leafOnly).checkedKeys\n  }\n\n  function getCheckedNodes(leafOnly = false): TreeNodeData[] {\n    return getChecked(leafOnly).checkedNodes\n  }\n\n  function getHalfCheckedKeys(): TreeKey[] {\n    return getHalfChecked().halfCheckedKeys\n  }\n\n  function getHalfCheckedNodes(): TreeNodeData[] {\n    return getHalfChecked().halfCheckedNodes\n  }\n\n  function getChecked(leafOnly = false): {\n    checkedKeys: TreeKey[]\n    checkedNodes: TreeNodeData[]\n  } {\n    const checkedNodes: TreeNodeData[] = []\n    const keys: TreeKey[] = []\n    if (tree?.value && props.showCheckbox) {\n      const { treeNodeMap } = tree.value\n      checkedKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key)\n        if (node && (!leafOnly || (leafOnly && node.isLeaf))) {\n          keys.push(key)\n          checkedNodes.push(node.data)\n        }\n      })\n    }\n    return {\n      checkedKeys: keys,\n      checkedNodes,\n    }\n  }\n\n  function getHalfChecked(): {\n    halfCheckedKeys: TreeKey[]\n    halfCheckedNodes: TreeNodeData[]\n  } {\n    const halfCheckedNodes: TreeNodeData[] = []\n    const halfCheckedKeys: TreeKey[] = []\n    if (tree?.value && props.showCheckbox) {\n      const { treeNodeMap } = tree.value\n      indeterminateKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key)\n        if (node) {\n          halfCheckedKeys.push(key)\n          halfCheckedNodes.push(node.data)\n        }\n      })\n    }\n    return {\n      halfCheckedNodes,\n      halfCheckedKeys,\n    }\n  }\n\n  function setCheckedKeys(keys: TreeKey[]) {\n    checkedKeys.value.clear()\n    _setCheckedKeys(keys)\n  }\n\n  function setChecked(key: TreeKey, isChecked: boolean) {\n    if (tree?.value && props.showCheckbox) {\n      const node = tree.value.treeNodeMap.get(key)\n      if (node) {\n        toggleCheckbox(node, isChecked, false)\n      }\n    }\n  }\n\n  function _setCheckedKeys(keys: TreeKey[]) {\n    if (tree?.value) {\n      const { treeNodeMap } = tree.value\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (let i = 0; i < keys.length; ++i) {\n          const key = keys[i]\n          const node = treeNodeMap.get(key)\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false)\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    updateCheckedKeys,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    // expose\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}