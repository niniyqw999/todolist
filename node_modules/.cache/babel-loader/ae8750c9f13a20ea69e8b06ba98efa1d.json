{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { ElMessageBox, ElMessage } from \"element-plus\";\nimport store from \"@/store/index.js\";\nexport default {\n  name: \"TagSetting\",\n  props: [\"isShowTagSetting\"],\n  data: function data() {\n    return {\n      tagSettingDialogVisible: this.isShowTagSetting,\n      isShowPlus: true,\n      inputTag: \"\",\n      isShowDeleteIcon: [],\n      isShowEditIcon: [],\n      modifyTagNameInput: [],\n      // 取消图标提示\n      cancleIconTipVisible: false,\n      createTagTipVisible: false,\n      deleteTagTipVisible: [],\n      renameTagTipVisible: [] // currentItemIndex: 0,\n\n    };\n  },\n  store: store,\n  methods: {\n    clickCancle: function clickCancle() {\n      this.isShowPlus = true;\n      this.cancleIconTipVisible = false;\n    },\n    addColor: function addColor($event) {\n      $event.currentTarget.classList.add(\"color\");\n    },\n    removeColor: function removeColor($event) {\n      $event.currentTarget.classList.remove(\"color\");\n    },\n    createNewTag: function createNewTag() {\n      var _this = this;\n\n      var isHave = false;\n      this.toDoTags.forEach(function (item) {\n        if (item.value === _this.inputTag.trim() || item.label === _this.inputTag.trim()) {\n          // 新建标签名不能相同\n          isHave = true;\n        } else {\n          isHave = false;\n        }\n      });\n\n      if (this.inputTag.trim().length === 0) {\n        ElMessage.error(\"新建标签名不能为空\");\n        this.$refs.inputTagRef.focus();\n      } else if (isHave) {\n        ElMessage.error(\"标签名已存在\");\n      } else {\n        store.commit(\"addNewTag\", {\n          value: this.inputTag,\n          label: this.inputTag\n        });\n        this.isShowPlus = true;\n        this.isShowEditIcon[this.toDoTags.length - 1] = true;\n        this.modifyTagNameInput[this.toDoTags.length - 1] = this.toDoTags[this.toDoTags.length - 1].value;\n        ElMessage({\n          type: \"success\",\n          message: \"创建标签成功\"\n        });\n      }\n    },\n    // 修改标签名\n    renameTag: function renameTag(index) {\n      var _this2 = this;\n\n      var oldTagName = this.toDoTags[index].value;\n      var isHaveThisTagName = false;\n      this.toDoTags.forEach(function (item) {\n        if (item.value === _this2.modifyTagNameInput[index] && _this2.modifyTagNameInput[index] !== oldTagName) {\n          isHaveThisTagName = true;\n        }\n      });\n\n      if (this.modifyTagNameInput[index].trim() === \"\") {\n        ElMessage.error(\"标签名不能为空\");\n        this.$refs.modifyTagNameInputRef.focus();\n      } else if (isHaveThisTagName) {\n        ElMessage.error(\"标签名重复\");\n      } else {\n        store.commit(\"updateToDoTagsOptions\", {\n          index: index,\n          value: this.modifyTagNameInput[index]\n        });\n        this.isShowEditIcon[index] = true;\n        this.renameTagTipVisible[index] = false; // 更新有该标签的记事中的标签名\n\n        store.state.toDoLists.forEach(function (item1) {\n          item1.toDoTags.forEach(function (item2) {\n            if (item2.name === oldTagName) {\n              item2.name = _this2.modifyTagNameInput[index];\n            }\n          });\n        });\n        ElMessage({\n          type: \"success\",\n          message: \"标签重命名成功\"\n        });\n      }\n    },\n    removeDeleteIconFocus: function removeDeleteIconFocus(index) {\n      this.isShowDeleteIcon[index] = false;\n      this.deleteTagTipVisible[index] = false;\n    },\n    clickEditTagName: function clickEditTagName(index) {\n      var length = this.toDoTags.length;\n\n      for (var i = 0; i < length; ++i) {\n        if (i !== index) {\n          this.isShowEditIcon[i] = true;\n        }\n      }\n\n      this.isShowEditIcon[index] = false;\n      this.renameTagTipVisible[index] = false;\n    },\n    // 删除标签\n    deleteTag: function deleteTag(index) {\n      var _this3 = this;\n\n      ElMessageBox.confirm(\"我们将删除此标签并将其从您所有的 Keep 记事中移除。您的记事不会被删除。\", \"提示\", {\n        confirmButtonText: \"删除\",\n        cancelButtonText: \"取消\",\n        type: \"info\"\n      }).then(function () {\n        var deleteTagName = _this3.toDoTags[index].value;\n        store.commit(\"deleteToDoTagsOptions\", {\n          index: index\n        }); // 从相关记事中移除该标签\n\n        store.state.toDoLists.forEach(function (item1) {\n          item1.toDoTags.forEach(function (item2, index) {\n            if (item2.name === deleteTagName) {\n              item1.toDoTags.splice(index, 1);\n            }\n          });\n        });\n        ElMessage({\n          type: \"success\",\n          message: \"标签已删除\"\n        });\n      })[\"catch\"](function () {\n        ElMessage({\n          type: \"info\",\n          message: \"取消删除\"\n        });\n      });\n    }\n  },\n  computed: {\n    toDoTags: function toDoTags() {\n      return store.state.toDoTagsOptions;\n    }\n  },\n  mounted: function mounted() {\n    var _this4 = this;\n\n    this.toDoTags.forEach(function (item) {\n      _this4.isShowDeleteIcon.push(false);\n\n      _this4.isShowEditIcon.push(true);\n\n      _this4.modifyTagNameInput.push(item.value);\n\n      _this4.deleteTagTipVisible.push(false);\n\n      _this4.renameTagTipVisible.push(false);\n    });\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessageBox","ElMessage","store","name","props","data","tagSettingDialogVisible","isShowTagSetting","isShowPlus","inputTag","isShowDeleteIcon","isShowEditIcon","modifyTagNameInput","cancleIconTipVisible","createTagTipVisible","deleteTagTipVisible","renameTagTipVisible","methods","clickCancle","addColor","$event","currentTarget","classList","add","removeColor","remove","createNewTag","isHave","toDoTags","forEach","item","value","trim","label","length","error","$refs","inputTagRef","focus","commit","type","message","renameTag","index","oldTagName","isHaveThisTagName","modifyTagNameInputRef","state","toDoLists","item1","item2","removeDeleteIconFocus","clickEditTagName","i","deleteTag","confirm","confirmButtonText","cancelButtonText","then","deleteTagName","splice","computed","toDoTagsOptions","mounted","push"],"sourceRoot":"","sources":["D:\\yqwwant\\.vscode\\.vscode\\TodoList记事本\\src\\components\\TagSetting.vue"],"sourcesContent":["<template>\n  <el-dialog\n    v-model=\"tagSettingDialogVisible\"\n    title=\"修改标签\"\n    top=\"8vh\"\n    width=\"30%\"\n    destroy-on-close\n  >\n    <div>\n      <el-card class=\"box-card\">\n        <template #header>\n          <div class=\"card-header\">\n            <span>\n              <el-button v-if=\"isShowPlus\" circle @click=\"isShowPlus = false\"\n                ><el-icon><plus /></el-icon\n              ></el-button>\n              <el-tooltip v-model:visible=\"cancleIconTipVisible\">\n                <template #content>\n                  <span>取消</span>\n                </template>\n                <el-button\n                  v-if=\"!isShowPlus\"\n                  circle\n                  @click=\"clickCancle()\"\n                  @mouseenter=\"cancleIconTipVisible = true\"\n                  @mouseleave=\"cancleIconTipVisible = false\"\n                  ><el-icon><close /></el-icon\n                ></el-button>\n              </el-tooltip>\n            </span>\n            <el-button\n              v-if=\"isShowPlus\"\n              type=\"info\"\n              plain\n              style=\"background-color: #fff\"\n              @mouseenter=\"addColor($event)\"\n              @mouseleave=\"removeColor($event)\"\n              @click=\"isShowPlus = false\"\n              >创建新标签</el-button\n            >\n            <el-input\n              ref=\"inputTagRef\"\n              class=\"input\"\n              v-if=\"!isShowPlus\"\n              v-model=\"inputTag\"\n              placeholder=\"创建新标签\"\n              style=\"width: 200px\"\n            >\n            </el-input>\n            <el-tooltip v-model:visible=\"createTagTipVisible\">\n              <template #content>\n                <span>创建标签</span>\n              </template>\n              <el-button\n                v-if=\"!isShowPlus\"\n                circle\n                @click=\"createNewTag\"\n                @mouseenter=\"createTagTipVisible = true\"\n                @mouseleave=\"createTagTipVisible = false\"\n              >\n                <el-icon><check /></el-icon>\n              </el-button>\n            </el-tooltip>\n          </div>\n        </template>\n        <div v-for=\"(tag, index) in toDoTags\" :key=\"tag\" class=\"tagItemDiv\">\n          <el-button\n            circle\n            v-if=\"!isShowDeleteIcon[index]\"\n            @mouseenter=\"isShowDeleteIcon[index] = true\"\n          >\n            <el-icon><price-tag /></el-icon\n          ></el-button>\n          <el-tooltip v-model:visible=\"deleteTagTipVisible[index]\">\n            <template #content>\n              <span>删除标签</span>\n            </template>\n            <el-button\n              circle\n              v-if=\"isShowDeleteIcon[index]\"\n              @mouseenter=\"deleteTagTipVisible[index] = true\"\n              @mouseleave=\"removeDeleteIconFocus(index)\"\n              @click=\"deleteTag(index)\"\n            >\n              <el-icon><delete /></el-icon\n            ></el-button>\n          </el-tooltip>\n          <span v-if=\"isShowEditIcon[index]\" class=\"tagName\">\n            {{ tag.value }}</span\n          >\n          <el-input\n            v-if=\"!isShowEditIcon[index]\"\n            class=\"modifyTagNameInput\"\n            v-model=\"modifyTagNameInput[index]\"\n            ref=\"modifyTagNameInputRef\"\n          ></el-input>\n          <el-tooltip v-model:visible=\"renameTagTipVisible[index]\">\n            <template #content>\n              <span>重命名标签</span>\n            </template>\n            <el-button\n              circle\n              class=\"editTagNameIcon\"\n              v-if=\"isShowEditIcon[index]\"\n              @mouseenter=\"renameTagTipVisible[index] = true\"\n              @mouseleave=\"renameTagTipVisible[index] = false\"\n              @click=\"clickEditTagName(index)\"\n            >\n              <el-icon><EditPen /></el-icon\n            ></el-button>\n          </el-tooltip>\n          <el-button\n            class=\"editTagNameIcon\"\n            v-if=\"!isShowEditIcon[index]\"\n            circle\n            @click=\"renameTag(index)\"\n          >\n            <el-icon><check /></el-icon>\n          </el-button>\n        </div>\n      </el-card>\n    </div>\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button @click=\"tagSettingDialogVisible = false\">关闭</el-button>\n      </div>\n    </template>\n  </el-dialog>\n</template>\n<script>\nimport { ElMessageBox, ElMessage } from \"element-plus\";\nimport store from \"@/store/index.js\";\nexport default {\n  name: \"TagSetting\",\n  props: [\"isShowTagSetting\"],\n  data() {\n    return {\n      tagSettingDialogVisible: this.isShowTagSetting,\n      isShowPlus: true,\n      inputTag: \"\",\n      isShowDeleteIcon: [],\n      isShowEditIcon: [],\n      modifyTagNameInput: [],\n      // 取消图标提示\n      cancleIconTipVisible: false,\n      createTagTipVisible: false,\n      deleteTagTipVisible: [],\n      renameTagTipVisible: [],\n      // currentItemIndex: 0,\n    };\n  },\n  store,\n  methods: {\n    clickCancle() {\n      this.isShowPlus = true;\n      this.cancleIconTipVisible = false;\n    },\n    addColor($event) {\n      $event.currentTarget.classList.add(\"color\");\n    },\n    removeColor($event) {\n      $event.currentTarget.classList.remove(\"color\");\n    },\n    createNewTag() {\n      let isHave = false;\n      this.toDoTags.forEach((item) => {\n        if (\n          item.value === this.inputTag.trim() ||\n          item.label === this.inputTag.trim()\n        ) {\n          // 新建标签名不能相同\n          isHave = true;\n        } else {\n          isHave = false;\n        }\n      });\n      if (this.inputTag.trim().length === 0) {\n        ElMessage.error(\"新建标签名不能为空\");\n        this.$refs.inputTagRef.focus();\n      } else if (isHave) {\n        ElMessage.error(\"标签名已存在\");\n      } else {\n        store.commit(\"addNewTag\", {\n          value: this.inputTag,\n          label: this.inputTag,\n        });\n        this.isShowPlus = true;\n        this.isShowEditIcon[this.toDoTags.length - 1] = true;\n        this.modifyTagNameInput[this.toDoTags.length - 1] =\n          this.toDoTags[this.toDoTags.length - 1].value;\n        ElMessage({\n          type: \"success\",\n          message: \"创建标签成功\",\n        });\n      }\n    },\n    // 修改标签名\n    renameTag(index) {\n      const oldTagName = this.toDoTags[index].value;\n      let isHaveThisTagName = false;\n      this.toDoTags.forEach((item) => {\n        if (\n          item.value === this.modifyTagNameInput[index] &&\n          this.modifyTagNameInput[index] !== oldTagName\n        ) {\n          isHaveThisTagName = true;\n        }\n      });\n      if (this.modifyTagNameInput[index].trim() === \"\") {\n        ElMessage.error(\"标签名不能为空\");\n        this.$refs.modifyTagNameInputRef.focus();\n      } else if (isHaveThisTagName) {\n        ElMessage.error(\"标签名重复\");\n      } else {\n        store.commit(\"updateToDoTagsOptions\", {\n          index: index,\n          value: this.modifyTagNameInput[index],\n        });\n        this.isShowEditIcon[index] = true;\n        this.renameTagTipVisible[index] = false;\n        // 更新有该标签的记事中的标签名\n        store.state.toDoLists.forEach((item1) => {\n          item1.toDoTags.forEach((item2) => {\n            if (item2.name === oldTagName) {\n              item2.name = this.modifyTagNameInput[index];\n            }\n          });\n        });\n        ElMessage({\n          type: \"success\",\n          message: \"标签重命名成功\",\n        });\n      }\n    },\n    removeDeleteIconFocus(index) {\n      this.isShowDeleteIcon[index] = false;\n      this.deleteTagTipVisible[index] = false;\n    },\n    clickEditTagName(index) {\n      const length = this.toDoTags.length;\n      for (let i = 0; i < length; ++i) {\n        if (i !== index) {\n          this.isShowEditIcon[i] = true;\n        }\n      }\n      this.isShowEditIcon[index] = false;\n      this.renameTagTipVisible[index] = false;\n    },\n    // 删除标签\n    deleteTag(index) {\n      ElMessageBox.confirm(\n        \"我们将删除此标签并将其从您所有的 Keep 记事中移除。您的记事不会被删除。\",\n        \"提示\",\n        {\n          confirmButtonText: \"删除\",\n          cancelButtonText: \"取消\",\n          type: \"info\",\n        }\n      )\n        .then(() => {\n          const deleteTagName = this.toDoTags[index].value;\n          store.commit(\"deleteToDoTagsOptions\", { index: index });\n          // 从相关记事中移除该标签\n          store.state.toDoLists.forEach((item1) => {\n            item1.toDoTags.forEach((item2, index) => {\n              if (item2.name === deleteTagName) {\n                item1.toDoTags.splice(index, 1);\n              }\n            });\n          });\n          ElMessage({\n            type: \"success\",\n            message: \"标签已删除\",\n          });\n        })\n        .catch(() => {\n          ElMessage({\n            type: \"info\",\n            message: \"取消删除\",\n          });\n        });\n    },\n  },\n  computed: {\n    toDoTags() {\n      return store.state.toDoTagsOptions;\n    },\n  },\n  mounted() {\n    this.toDoTags.forEach((item) => {\n      this.isShowDeleteIcon.push(false);\n      this.isShowEditIcon.push(true);\n      this.modifyTagNameInput.push(item.value);\n      this.deleteTagTipVisible.push(false);\n      this.renameTagTipVisible.push(false);\n    });\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n:deep(.el-input__inner) {\n  border: 0;\n}\n.el-button {\n  border: none;\n  margin-left: 5px;\n  margin-right: 5px;\n}\n.color {\n  color: gray;\n}\n.tagItemDiv {\n  font-size: 16px;\n  margin-top: 20px;\n}\n.tagItemDiv:first-child {\n  margin-top: 5px;\n}\n.tagName {\n  margin-left: 20px;\n}\n.editTagNameIcon {\n  float: right;\n}\n.box-card {\n  max-height: 500px;\n  overflow-y: auto;\n}\n.modifyTagNameInput {\n  width: 150px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}