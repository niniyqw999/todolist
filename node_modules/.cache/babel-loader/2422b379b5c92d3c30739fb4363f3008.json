{"ast":null,"code":"import \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport store from \"@/store/index.js\";\nimport AddToDo from \"@/components/AddToDo.vue\";\nimport EditToDo from \"@/components/EditToDo.vue\";\nimport { ElMessageBox, ElMessage } from \"element-plus\";\nexport default {\n  name: \"ToDoListView\",\n  components: {\n    AddToDo: AddToDo,\n    EditToDo: EditToDo\n  },\n  data: function data() {\n    return {\n      // toDoLists: store.state.toDoLists,\n      inputToDo: \"\",\n      // 是否展示添加记事对话框\n      addToDoDialogVisible: false,\n      // 添加记事对话框标题\n      addToDoDialogTitle: \"添加记事\",\n      // 鼠标聚焦时才显示footer\n      isShowFooter: false,\n      currentLi: 0,\n      // 是否展示选择器\n      tagValue: \"\",\n      selectVisible: [],\n      editToDoDialogVisible: false,\n      toDoTime: \"\",\n      // toDoTime: this.toDoTimeFun(),\n      // defaultToDoTime: this.defaultToDoTimeFun(),\n      shortcuts: [{\n        text: \"今天\",\n        value: new Date()\n      }, {\n        text: \"昨天\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24);\n          return date;\n        }\n      }, {\n        text: \"一周前\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n          return date;\n        }\n      }],\n      isShowDatePicker: []\n    };\n  },\n  store: store,\n  methods: {\n    getFocus: function getFocus($event, index) {\n      this.isShowFooter = true;\n      this.currentLi = index;\n    },\n    removeFocus: function removeFocus($event) {\n      this.isShowFooter = false;\n      this.currentLi = null;\n    },\n    // 给记事新增标签\n    updateToDoListTag: function updateToDoListTag(index, tagObj) {\n      // store.commit(\"updateToDoListTag\", { index: index, tagObj: tagObj });\n      this.toDoLists[index].toDoTags.push(tagObj);\n    },\n    // 标签选择器选择改变\n    change: function change(val, index) {\n      var _this = this;\n\n      var isFlag = false;\n      this.toDoLists[index].toDoTags.forEach(function (item) {\n        if (val === item.name) {\n          isFlag = true;\n          ElMessage({\n            type: \"error\",\n            message: \"不能新增已有的标签\"\n          });\n        }\n      });\n\n      if (!isFlag) {\n        ElMessageBox.confirm(\"当前选择新增标签为:\" + val + \"，确认新增?\", \"提示\", {\n          confirmButtonText: \"确认\",\n          cancelButtonText: \"取消\",\n          type: \"info\"\n        }).then(function () {\n          // 新增标签逻辑\n          var tagObj = {\n            name: val\n          };\n\n          _this.updateToDoListTag(index, tagObj);\n\n          _this.selectVisible[index] = false;\n          ElMessage({\n            type: \"success\",\n            message: \"新增标签成功\"\n          });\n        })[\"catch\"](function () {\n          // 新增失败\n          _this.selectVisible[index] = false;\n          ElMessage({\n            type: \"error\",\n            message: \"取消新增\"\n          });\n        });\n      }\n    },\n    // change\n    // 编辑记事\n    editToDoList: function editToDoList(index) {\n      this.editToDoDialogVisible = true;\n      this.currentLi = index; // alert(\"点击编辑记事\" + index);\n    },\n    // 监听子组件事件之后的处理函数\n    closeEditDialog: function closeEditDialog(data) {\n      this.editToDoDialogVisible = data;\n    },\n    //  移除标签\n    handleClose: function handleClose(name) {\n      var _this2 = this;\n\n      this.toDoLists[this.currentLi].toDoTags.forEach(function (item) {\n        if (name === item.name) {\n          _this2.toDoLists[_this2.currentLi].toDoTags.splice(_this2.toDoLists[_this2.currentLi].toDoTags.indexOf(item), 1);\n        }\n      });\n    },\n    // 修改提醒时间\n    editToDoTime: function editToDoTime(index) {\n      // alert(\"修改todoTime\");\n      this.isShowDatePicker[index] = true;\n      this.currentLi = index;\n    },\n    // 时间选择器选择改变\n    timeChange: function timeChange(value, index) {\n      // store.commit(\"updateToDoTime\", {\n      //   index: index,\n      //   toDoTime: value,\n      // });\n      this.toDoLists[index].toDoTime = value;\n      this.isShowDatePicker[index] = false;\n\n      if (value === \"\" || value === null) {\n        // 删除提醒时间\n        ElMessage({\n          message: \"已从提醒中移除\",\n          center: true,\n          type: \"success\" // offset: 150\n\n        });\n      } else {\n        ElMessage({\n          message: \"修改提醒时间成功\",\n          center: true,\n          type: \"success\" // offset: 150\n\n        });\n      }\n    },\n    // 完成记事\n    completeToDo: function completeToDo(index) {\n      // store.commit(\"updateToDoIsComplete\", {\n      //   index: index,\n      //   isCompleted: true,\n      // });\n      this.toDoLists[index].isCompleted = true;\n      ElMessage({\n        message: \"待办已完成\",\n        center: true,\n        type: \"success\" // offset: 150\n\n      });\n    },\n    // 删除记事\n    deleteToDo: function deleteToDo(index) {\n      // store.commit(\"deleteToDo\", { index: index });\n      // store.state.toDoLists.forEach((item, itemIndex) => {\n      //   if (item === this.toDoLists[index]) {\n      //     store.state.toDoLists.splice(itemIndex, 1);\n      //   }\n      // });\n      var deleteItem = this.toDoLists.splice(index, 1);\n      store.state.toDoLists.forEach(function (item, itemIndex) {\n        if (item === deleteItem[0]) {\n          store.state.toDoLists.splice(itemIndex, 1);\n        }\n      }); // 往回收站写入数据\n\n      store.commit(\"addDeletedToDoList\", {\n        value: deleteItem[0]\n      });\n      ElMessage({\n        message: \"记事已删除\",\n        center: true,\n        type: \"success\" // offset: 150\n\n      });\n    },\n    clickAddToDo: function clickAddToDo() {\n      this.addToDoDialogVisible = true;\n      this.$refs.addToDoInputRef.blur();\n    } // toDoTimeFun() {\n    //   return this.toDoLists[this.currentLi].toDoTime !== null\n    //     ? this.toDoLists[this.currentLi].toDoTime\n    //     : \"\";\n    // },\n    // defaultToDoTimeFun() {\n    //   return new Date(this.toDoLists[this.currentLi].toDoTime) !== null\n    //     ? new Date(this.toDoLists[this.currentLi].toDoTime)\n    //     : \"\";\n    // },\n\n  },\n  computed: {\n    toDoLists: function toDoLists() {\n      return store.getters.getSearchToDoLists(store.state.searchContent);\n    },\n    isHaveToDo: function isHaveToDo() {\n      if (store.state.toDoLists.length !== 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 标签选择器\n    toDoTagsOptions: function toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    } // defaultToDoTime() {\n    //   new Date(this.toDoLists[this.currentLi].toDoTime);\n    // },\n\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.toDoLists.forEach(function (item) {\n      _this3.selectVisible.push(false);\n\n      _this3.isShowDatePicker.push(false);\n    }); // this.toDoTime =\n    //   this.toDoLists[this.currentLi].toDoTime !== null\n    //     ? this.toDoLists[this.currentLi].toDoTime\n    //     : \"\";\n    // this.defaultToDoTime =\n    //   new Date(this.toDoLists[this.currentLi].toDoTime) !== null\n    //     ? new Date(this.toDoLists[this.currentLi].toDoTime)\n    //     : \"\";\n  }\n};","map":{"version":3,"mappings":"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","names":["store","AddToDo","EditToDo","ElMessageBox","ElMessage","name","components","data","inputToDo","addToDoDialogVisible","addToDoDialogTitle","isShowFooter","currentLi","tagValue","selectVisible","editToDoDialogVisible","toDoTime","shortcuts","text","value","Date","date","setTime","getTime","isShowDatePicker","methods","getFocus","$event","index","removeFocus","updateToDoListTag","tagObj","toDoLists","toDoTags","push","change","val","isFlag","forEach","item","type","message","confirm","confirmButtonText","cancelButtonText","then","editToDoList","closeEditDialog","handleClose","splice","indexOf","editToDoTime","timeChange","center","completeToDo","isCompleted","deleteToDo","deleteItem","state","itemIndex","commit","clickAddToDo","$refs","addToDoInputRef","blur","computed","getters","getSearchToDoLists","searchContent","isHaveToDo","length","toDoTagsOptions","mounted"],"sourceRoot":"","sources":["D:\\yqwwant\\.vscode\\.vscode\\TodoList记事本\\src\\views\\ToDoListView.vue"],"sourcesContent":["<template>\n  <div>\n    <!--添加记事搜索框-->\n    <svg class=\"jicon\" aria-hidden=\"true\"  @click=\"clickAddToDo\">\n    <use xlink:href=\"#icon-jishiben\"></use>\n    </svg>\n    <el-input\n      ref=\"addToDoInputRef\"\n      v-model=\"inputToDo\"\n      class=\"w-50 m-2 inputToDo\"\n      placeholder=\"添加记事...\"\n      icon=\"el-icon-search\"\n      type=\"text\"\n      @click=\"clickAddToDo\"\n    ></el-input>\n    <!--添加记事对话框-->\n    <el-dialog\n      v-model=\"addToDoDialogVisible\"\n      :title=\"addToDoDialogTitle\"\n      top=\"8vh\"\n    >\n      <AddToDo></AddToDo>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"addToDoDialogVisible = false\">关闭</el-button>\n        </div>\n      </template>\n    </el-dialog>\n    <!---->\n    <!--记事为空-->\n    <Transition>\n    <div class=\"isNullDiv\" v-if=\"!isHaveToDo\">还没有记事噢</div>\n    </Transition>\n    <!--记事不为空-->\n    <!--改成卡片布局-->\n    <Transition>\n    <div class=\"isNotNullDiv\" v-if=\"isHaveToDo\">\n      <el-row>\n        <el-col\n          v-for=\"(todoItem, index) in toDoLists\"\n          :key=\"index\"\n          class=\"el-col-style\"\n          :span=\"6\"\n          :offset=\"index > 0 ? 2 : 0\"\n          @mouseenter=\"getFocus($event, index)\"\n          @mouseleave=\"removeFocus($event)\"\n        >\n          <el-card :body-style=\"{ padding: '0px' }\" shadow=\"hover\">\n            <div style=\"padding: 14px\">\n              <div class=\"header\" style=\"overflow: hidden\">\n                <h2 style=\"float: left\">{{ todoItem.title }}</h2>\n                <Transition>\n                <el-button\n                  circle\n                  style=\"float: right; border: 1px solid red ;color:red;\"\n                  v-show=\"todoItem.isCompleted === true\"\n                >\n                  <el-icon><finished /></el-icon>\n                </el-button>\n                </Transition>\n              </div>\n              <div class=\"content\">\n                {{ todoItem.content }}\n              </div>\n              <div class=\"tag\">\n                <el-tag\n                  v-for=\"tag of todoItem.toDoTags\"\n                  :key=\"tag.name\"\n                  type=\"\"\n                  class=\"mx-1\"\n                  size=\"small\"\n                  closable\n                  :disable-transitions=\"false\"\n                  @close=\"handleClose(tag.name)\"\n                >\n                  {{ tag.name }}\n                </el-tag>\n                <Transition>\n                <el-popover\n                  v-if=\"\n                    !selectVisible[index] && isShowFooter && currentLi === index\n                  \"\n                  placement=\"bottom-start\"\n                  title=\"\"\n                  :width=\"150\"\n                  trigger=\"hover\"\n                  content=\"增加标签\"\n                >\n                  <template #reference>\n                    <el-button\n                      size=\"small\"\n                      style=\"margin-left: 5px; margin-top: 2px; border: none\"\n                      @click=\"selectVisible[index] = true\"\n                      ><el-icon><plus /></el-icon\n                    ></el-button> </template\n                ></el-popover>\n                </Transition>\n                <!-- 标签选择器-->\n                <Transition>\n                <el-select\n                  v-model=\"tagValue\"\n                  v-if=\"selectVisible[index]\"\n                  class=\"m-2 tagSelect\"\n                  placeholder=\"选择标签\"\n                  size=\"small\"\n                  @change=\"change(tagValue, index)\"\n                  filterable\n                >\n                  <el-option\n                    v-for=\"item in toDoTagsOptions\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\"\n                  >\n                  </el-option>\n                </el-select>\n              </Transition>\n              </div>\n              <!--tag-->\n            </div>\n            <div class=\"bottom\">\n              <div class=\"timeDiv\">\n                <div v-if=\"!isShowDatePicker[index]\">\n                  <el-icon\n                    v-if=\"\n                      todoItem.toDoTime !== '' && todoItem.toDoTime !== null\n                    \"\n                    size=\"small\"\n                    class=\"clock\"\n                    ><clock\n                  /></el-icon>\n                  <span\n                    class=\"todoTime\"\n                    :class=\"\n                      new Date(todoItem.toDoTime).getTime() <\n                      new Date().getTime()\n                        ? 'line-through'\n                        : ''\n                    \"\n                  >\n                    {{ todoItem.toDoTime }}\n                  </span>\n                  <el-popover\n                    placement=\"bottom-start\"\n                    title=\"\"\n                    :width=\"150\"\n                    trigger=\"hover\"\n                    content=\"修改时间\"\n                  >\n                    <template #reference>\n                      <el-button\n                        circle\n                        size=\"small\"\n                        style=\"border: none\"\n                        v-show=\"isShowFooter && currentLi === index\"\n                      >\n                        <el-icon\n                          class=\"edit-todoTime\"\n                          color=\"gray\"\n                          size=\"small\"\n                          @click=\"editToDoTime(index)\"\n                          ><edit-pen /></el-icon\n                      ></el-button>\n                    </template>\n                  </el-popover>\n                </div>\n                <el-date-picker\n                  v-if=\"isShowDatePicker[index]\"\n                  v-model=\"toDoTime\"\n                  type=\"datetime\"\n                  :shortcuts=\"shortcuts\"\n                  value-format=\"YYYY-MM-DD hh:mm:ss\"\n                  size=\"small\"\n                  clearable\n                  @change=\"timeChange(toDoTime, index)\"\n                >\n                </el-date-picker>\n              </div>\n              <div\n                v-show=\"isShowFooter && currentLi === index\"\n                class=\"functionDiv\"\n              >\n                <el-popover\n                  placement=\"bottom-start\"\n                  title=\"\"\n                  :width=\"150\"\n                  trigger=\"hover\"\n                  content=\"编辑记事\"\n                >\n                  <template #reference\n                    ><el-button\n                      type=\"primary\"\n                      circle\n                      @click=\"editToDoList(index)\"\n                      size=\"small\"\n                      ><el-icon><edit /></el-icon></el-button></template\n                ></el-popover>\n                <el-popover\n                  placement=\"bottom-start\"\n                  title=\"\"\n                  :width=\"150\"\n                  trigger=\"hover\"\n                  content=\"完成记事\"\n                  v-if=\"!todoItem.isCompleted\"\n                >\n                  <template #reference>\n                    <el-button\n                      v-if=\"!todoItem.isCompleted\"\n                      type=\"success\"\n                      circle\n                      size=\"small\"\n                      @click=\"completeToDo(index)\"\n                    >\n                      <el-icon><check /></el-icon>\n                    </el-button>\n                  </template>\n                </el-popover>\n                <el-popover\n                  placement=\"bottom-start\"\n                  title=\"\"\n                  :width=\"150\"\n                  trigger=\"hover\"\n                  content=\"删除记事\"\n                >\n                  <template #reference>\n                    <el-button\n                      type=\"info\"\n                      circle\n                      @click=\"deleteToDo(index)\"\n                      size=\"small\"\n                      ><el-icon><delete /></el-icon></el-button></template\n                ></el-popover>\n                <!--编辑记事对话框-->\n                <el-dialog\n                  v-model=\"editToDoDialogVisible\"\n                  title=\"编辑记事\"\n                  top=\"8vh\"\n                  destroy-on-close=\"true\"\n                >\n                  <EditToDo\n                    :toDoIndex=\"currentLi\"\n                    v-on:closeDialog=\"closeEditDialog\"\n                  ></EditToDo>\n                  <template #footer>\n                    <div class=\"dialog-footer\">\n                      <el-button @click=\"editToDoDialogVisible = false\"\n                        >关闭</el-button\n                      >\n                    </div>\n                  </template>\n                </el-dialog>\n              </div>\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n    </div>\n  </Transition>\n  </div>\n</template>\n<script>\nimport store from \"@/store/index.js\";\nimport AddToDo from \"@/components/AddToDo.vue\";\nimport EditToDo from \"@/components/EditToDo.vue\";\nimport { ElMessageBox, ElMessage } from \"element-plus\";\nexport default {\n  name: \"ToDoListView\",\n  components: { AddToDo, EditToDo },\n  data() {\n    return {\n      // toDoLists: store.state.toDoLists,\n      inputToDo: \"\",\n      // 是否展示添加记事对话框\n      addToDoDialogVisible: false,\n      // 添加记事对话框标题\n      addToDoDialogTitle: \"添加记事\",\n      // 鼠标聚焦时才显示footer\n      isShowFooter: false,\n      currentLi: 0,\n      // 是否展示选择器\n      tagValue: \"\",\n      selectVisible: [],\n      editToDoDialogVisible: false,\n      toDoTime: \"\",\n      // toDoTime: this.toDoTimeFun(),\n      // defaultToDoTime: this.defaultToDoTimeFun(),\n      shortcuts: [\n        {\n          text: \"今天\",\n          value: new Date(),\n        },\n        {\n          text: \"昨天\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24);\n            return date;\n          },\n        },\n        {\n          text: \"一周前\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n            return date;\n          },\n        },\n      ],\n      isShowDatePicker: [],\n    };\n  },\n  store,\n  methods: {\n    getFocus($event, index) {\n      this.isShowFooter = true;\n      this.currentLi = index;\n    },\n    removeFocus($event) {\n      this.isShowFooter = false;\n      this.currentLi = null;\n    },\n    // 给记事新增标签\n    updateToDoListTag(index, tagObj) {\n      // store.commit(\"updateToDoListTag\", { index: index, tagObj: tagObj });\n      this.toDoLists[index].toDoTags.push(tagObj);\n    },\n    // 标签选择器选择改变\n    change(val, index) {\n      let isFlag = false;\n      this.toDoLists[index].toDoTags.forEach((item) => {\n        if (val === item.name) {\n          isFlag = true;\n          ElMessage({\n            type: \"error\",\n            message: \"不能新增已有的标签\",\n          });\n        }\n      });\n      if (!isFlag) {\n        ElMessageBox.confirm(\n          \"当前选择新增标签为:\" + val + \"，确认新增?\",\n          \"提示\",\n          {\n            confirmButtonText: \"确认\",\n            cancelButtonText: \"取消\",\n            type: \"info\",\n          }\n        )\n          .then(() => {\n            // 新增标签逻辑\n            const tagObj = { name: val };\n            this.updateToDoListTag(index, tagObj);\n            this.selectVisible[index] = false;\n            ElMessage({\n              type: \"success\",\n              message: \"新增标签成功\",\n            });\n          })\n          .catch(() => {\n            // 新增失败\n            this.selectVisible[index] = false;\n            ElMessage({\n              type: \"error\",\n              message: \"取消新增\",\n            });\n          });\n      }\n    }, // change\n    // 编辑记事\n    editToDoList(index) {\n      this.editToDoDialogVisible = true;\n      this.currentLi = index;\n      // alert(\"点击编辑记事\" + index);\n    },\n    // 监听子组件事件之后的处理函数\n    closeEditDialog(data) {\n      this.editToDoDialogVisible = data;\n    },\n    //  移除标签\n    handleClose(name) {\n      this.toDoLists[this.currentLi].toDoTags.forEach((item) => {\n        if (name === item.name) {\n          this.toDoLists[this.currentLi].toDoTags.splice(\n            this.toDoLists[this.currentLi].toDoTags.indexOf(item),\n            1\n          );\n        }\n      });\n    },\n    // 修改提醒时间\n    editToDoTime(index) {\n      // alert(\"修改todoTime\");\n      this.isShowDatePicker[index] = true;\n      this.currentLi = index;\n    },\n    // 时间选择器选择改变\n    timeChange(value, index) {\n      // store.commit(\"updateToDoTime\", {\n      //   index: index,\n      //   toDoTime: value,\n      // });\n      this.toDoLists[index].toDoTime = value;\n      this.isShowDatePicker[index] = false;\n      if (value === \"\" || value === null) {\n        // 删除提醒时间\n        ElMessage({\n          message: \"已从提醒中移除\",\n          center: true,\n          type: \"success\",\n          // offset: 150\n        });\n      } else {\n        ElMessage({\n          message: \"修改提醒时间成功\",\n          center: true,\n          type: \"success\",\n          // offset: 150\n        });\n      }\n    },\n    // 完成记事\n    completeToDo(index) {\n      // store.commit(\"updateToDoIsComplete\", {\n      //   index: index,\n      //   isCompleted: true,\n      // });\n      this.toDoLists[index].isCompleted = true;\n      ElMessage({\n        message: \"待办已完成\",\n        center: true,\n        type: \"success\",\n        // offset: 150\n      });\n    },\n    // 删除记事\n    deleteToDo(index) {\n      // store.commit(\"deleteToDo\", { index: index });\n      // store.state.toDoLists.forEach((item, itemIndex) => {\n      //   if (item === this.toDoLists[index]) {\n      //     store.state.toDoLists.splice(itemIndex, 1);\n      //   }\n      // });\n      const deleteItem = this.toDoLists.splice(index, 1);\n      store.state.toDoLists.forEach((item, itemIndex) => {\n        if (item === deleteItem[0]) {\n          store.state.toDoLists.splice(itemIndex, 1);\n        }\n      });\n      // 往回收站写入数据\n      store.commit(\"addDeletedToDoList\", { value: deleteItem[0] });\n      ElMessage({\n        message: \"记事已删除\",\n        center: true,\n        type: \"success\",\n        // offset: 150\n      });\n    },\n    clickAddToDo() {\n      this.addToDoDialogVisible = true;\n      this.$refs.addToDoInputRef.blur();\n    },\n    // toDoTimeFun() {\n    //   return this.toDoLists[this.currentLi].toDoTime !== null\n    //     ? this.toDoLists[this.currentLi].toDoTime\n    //     : \"\";\n    // },\n    // defaultToDoTimeFun() {\n    //   return new Date(this.toDoLists[this.currentLi].toDoTime) !== null\n    //     ? new Date(this.toDoLists[this.currentLi].toDoTime)\n    //     : \"\";\n    // },\n  },\n  computed: {\n    toDoLists() {\n      return store.getters.getSearchToDoLists(store.state.searchContent);\n    },\n    isHaveToDo() {\n      if (store.state.toDoLists.length !== 0) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    // 标签选择器\n    toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    },\n    // defaultToDoTime() {\n    //   new Date(this.toDoLists[this.currentLi].toDoTime);\n    // },\n  },\n  mounted() {\n    this.toDoLists.forEach((item) => {\n      this.selectVisible.push(false);\n      this.isShowDatePicker.push(false);\n    });\n    // this.toDoTime =\n    //   this.toDoLists[this.currentLi].toDoTime !== null\n    //     ? this.toDoLists[this.currentLi].toDoTime\n    //     : \"\";\n    // this.defaultToDoTime =\n    //   new Date(this.toDoLists[this.currentLi].toDoTime) !== null\n    //     ? new Date(this.toDoLists[this.currentLi].toDoTime)\n    //     : \"\";\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.inputToDo {\n  margin-top: 20px;\n  margin-left: 20px;\n  width: 500px;\n}\n.todoStatus {\n  float: right;\n  margin-top: 10px;\n}\n.isNullDiv {\n  width: 500px;\n  height: 30px;\n  text-align: center;\n  margin: 0 auto;\n  margin-top: 200px;\n  font-size: 30px;\n  color: gray;\n}\n.isNotNullDiv {\n  margin-top: 50px;\n  .el-col-style {\n    margin-top: 10px;\n  }\n  .content {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n  .bottom {\n    .timeDiv {\n      height: 30px;\n      float: right;\n      line-height: 30px;\n      margin-bottom: 10px;\n      .edit-todoTime {\n        margin-right: 5px;\n      }\n      .todoTime {\n        font-size: 14px;\n        margin-left: 3px;\n        margin-right: 5px;\n      }\n      &:deep(.el-input) {\n        width: 165px;\n      }\n      &:deep(.el-input__icon) {\n        height: 24px;\n      }\n    }\n    .functionDiv {\n      height: 30px;\n      float: left;\n      margin-left: 10px;\n      margin-bottom: 10px;\n    }\n  }\n}\n.el-tag {\n  margin-right: 5px;\n}\n.tagSelect {\n  width: 100px;\n  margin-top: 5px;\n}\n.line-through {\n  text-decoration: line-through;\n  color: gray;\n}\n.v-enter-active,\n.v-leave-active {\n  transition: opacity 1s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n.jicon{\n  width: 40px;\n  height: 40px;\n  position: relative;\n  top: 15px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}