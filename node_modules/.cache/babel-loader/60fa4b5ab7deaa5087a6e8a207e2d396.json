{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/yqwwant/.vscode/.vscode/TodoList\\u8BB0\\u4E8B\\u672C/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport store from \"@/store/index.js\";\nimport { ElMessage } from \"element-plus\";\nimport moment from \"moment\";\nexport default {\n  name: \"EditToDo\",\n  data: function data() {\n    return {\n      shortcuts: [{\n        text: \"今天\",\n        value: new Date()\n      }, {\n        text: \"昨天\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24);\n          return date;\n        }\n      }, {\n        text: \"一周前\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n          return date;\n        }\n      }],\n      toDoRules: {\n        toDoContent: [{\n          required: true,\n          message: \"请输入记事内容\",\n          trigger: \"blur\"\n        }]\n      },\n      formSize: \"\",\n      toDoFormModel: {},\n      defaultToDoTime: \"\",\n      arr: []\n    };\n  },\n  // data\n  props: [\"toDoIndex\"],\n  store: store,\n  methods: {\n    // 提交修改\n    submitUpdateToDoForm: function submitUpdateToDoForm() {\n      var _this = this;\n\n      if (!this.$refs.editToDoFormRef) {\n        console.log(\"失败\");\n        return;\n      }\n\n      this.$refs.editToDoFormRef.validate(function (valid) {\n        if (valid) {\n          var toDoTags = [];\n\n          var _iterator = _createForOfIteratorHelper(_this.toDoFormModel.tagValue),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              toDoTags.push({\n                name: item\n              });\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var toDoObj = {\n            title: _this.toDoFormModel.toDoTitle,\n            content: _this.toDoFormModel.toDoContent,\n            toDoTime: _this.datetime(_this.toDoFormModel.toDoTime),\n            // toDoTags: [{ name: this.toDoFormModel.tagValue }],\n            isCompleted: false,\n            isOutOfTime: false,\n            toDoTags: toDoTags\n          }; // store.commit(\"updateToDoList\", {\n          //   index: this.toDoIndex,\n          //   toDoObj: toDoObj,\n          // });\n\n          var oldValue = _this.toDoLists[_this.toDoIndex];\n\n          _this.toDoLists.splice(_this.toDoIndex, 1, toDoObj);\n\n          store.state.toDoLists.forEach(function (item, itemIndex) {\n            if (item === oldValue) {\n              store.state.toDoLists.splice(itemIndex, 1, toDoObj);\n            }\n          }); // this.toDoLists.splice(this.toDoIndex, 1, toDoObj);\n          // 添加成功之后的提示框\n\n          ElMessage({\n            message: \"修改记事成功\",\n            center: true,\n            type: \"success\" // offset: 150\n\n          }); // 关闭对话框\n\n          _this.$emit(\"closeDialog\", false);\n        } else {\n          console.log(\"error submit!\");\n          return false;\n        }\n      });\n    },\n    // 清空添加记事表单\n    resetEditToDoForm: function resetEditToDoForm() {\n      this.$refs.editToDoFormRef.resetFields();\n      this.toDoFormModel.toDoTime = \"\";\n      this.toDoFormModel.tagValue = \"\";\n    },\n    datetime: function datetime(val) {\n      return moment(val).format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n  },\n  computed: {\n    // 标签选择器\n    toDoTagsOptions: function toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    },\n    toDoLists: function toDoLists() {\n      return store.getters.getSearchToDoLists(store.state.searchContent);\n    },\n    getDefaultTags: function getDefaultTags() {\n      var tagArr1 = this.toDoLists[this.toDoIndex].toDoTags;\n      var tagArr2 = [];\n\n      var _iterator2 = _createForOfIteratorHelper(tagArr1),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          tagArr2.push(item.name);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return tagArr2;\n    }\n  },\n  mounted: function mounted() {\n    this.toDoFormModel = {\n      toDoTitle: this.toDoLists[this.toDoIndex].title,\n      toDoContent: this.toDoLists[this.toDoIndex].content,\n      toDoTime: this.toDoLists[this.toDoIndex].toDoTime,\n      tagValue: this.getDefaultTags\n    };\n    this.defaultToDoTime = new Date(this.toDoLists[this.toDoIndex].toDoTime);\n  }\n};","map":{"version":3,"mappings":"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","names":["store","ElMessage","moment","name","data","shortcuts","text","value","Date","date","setTime","getTime","toDoRules","toDoContent","required","message","trigger","formSize","toDoFormModel","defaultToDoTime","arr","props","methods","submitUpdateToDoForm","$refs","editToDoFormRef","console","log","validate","valid","toDoTags","tagValue","item","push","toDoObj","title","toDoTitle","content","toDoTime","datetime","isCompleted","isOutOfTime","oldValue","toDoLists","toDoIndex","splice","state","forEach","itemIndex","center","type","$emit","resetEditToDoForm","resetFields","val","format","computed","toDoTagsOptions","getters","getSearchToDoLists","searchContent","getDefaultTags","tagArr1","tagArr2","mounted"],"sourceRoot":"","sources":["D:\\yqwwant\\.vscode\\.vscode\\TodoList记事本\\src\\components\\EditToDo.vue"],"sourcesContent":["<template>\n  <Transition>\n  <div class=\"editToDoDiv\">\n    <el-form\n      ref=\"editToDoFormRef\"\n      :model=\"toDoFormModel\"\n      :rules=\"toDoRules\"\n      label-width=\"120px\"\n      class=\"toDoForm\"\n      :size=\"formSize\"\n    >\n      <el-form-item label=\"标题\" prop=\"toDoTitle\" class=\"el-form-title\">\n        <el-input\n          v-model=\"toDoFormModel.toDoTitle\"\n          clearable\n          placeholder=\"请输入记事标题\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"内容\" prop=\"toDoContent\">\n        <el-input\n          v-model=\"toDoFormModel.toDoContent\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 8, maxRows: 15 }\"\n          placeholder=\"请输入记事内容\"\n        >\n        </el-input>\n      </el-form-item>\n      <el-form-item label=\"标签\">\n        <el-select\n          multiple\n          collapse-tags\n          v-model=\"toDoFormModel.tagValue\"\n          class=\"m-2 tagSelect\"\n          placeholder=\"选择标签\"\n          size=\"small\"\n          filterable\n        >\n          <el-option\n            v-for=\"item in toDoTagsOptions\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          >\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"提醒时间\">\n        <el-date-picker\n          v-model=\"toDoFormModel.toDoTime\"\n          type=\"datetime\"\n          :placeholder=\"defaultToDoTime\"\n          :shortcuts=\"shortcuts\"\n          value-format=\"YYYY-MM-DD hh:mm:ss\"\n        >\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item class=\"el-form-button\">\n        <el-button\n          type=\"primary\"\n          @click=\"submitUpdateToDoForm()\"\n          class=\"submitBtn\"\n          >修改记事</el-button\n        >\n        <el-button @click=\"resetEditToDoForm()\" class=\"cancelBtn\"\n          >清空</el-button\n        >\n      </el-form-item>\n    </el-form>\n  </div>\n</Transition>\n</template>\n<script>\nimport store from \"@/store/index.js\";\nimport { ElMessage } from \"element-plus\";\nimport moment from \"moment\";\nexport default {\n  name: \"EditToDo\",\n  data() {\n    return {\n      shortcuts: [\n        {\n          text: \"今天\",\n          value: new Date(),\n        },\n        {\n          text: \"昨天\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24);\n            return date;\n          },\n        },\n        {\n          text: \"一周前\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n            return date;\n          },\n        },\n      ],\n      toDoRules: {\n        toDoContent: [\n          { required: true, message: \"请输入记事内容\", trigger: \"blur\" },\n        ],\n      },\n      formSize: \"\",\n      toDoFormModel: {},\n      defaultToDoTime: \"\",\n      arr: []\n    };\n  }, // data\n  props: [\"toDoIndex\"],\n  store,\n  methods: {\n    // 提交修改\n    submitUpdateToDoForm() {\n      if (!this.$refs.editToDoFormRef) {\n        console.log(\"失败\");\n        return;\n      }\n      this.$refs.editToDoFormRef.validate((valid) => {\n        if (valid) {\n          const toDoTags = [];\n          for (const item of this.toDoFormModel.tagValue) {\n            toDoTags.push({ name: item });\n          }\n          const toDoObj = {\n            title: this.toDoFormModel.toDoTitle,\n            content: this.toDoFormModel.toDoContent,\n            toDoTime: this.datetime(this.toDoFormModel.toDoTime),\n            // toDoTags: [{ name: this.toDoFormModel.tagValue }],\n            isCompleted: false,\n            isOutOfTime: false,\n            toDoTags: toDoTags,\n          };\n          // store.commit(\"updateToDoList\", {\n          //   index: this.toDoIndex,\n          //   toDoObj: toDoObj,\n          // });\n          const oldValue = this.toDoLists[this.toDoIndex];\n          this.toDoLists.splice(this.toDoIndex, 1, toDoObj);\n          store.state.toDoLists.forEach((item, itemIndex) => {\n            if (item === oldValue) {\n              store.state.toDoLists.splice(itemIndex, 1, toDoObj);\n            }\n          });\n          // this.toDoLists.splice(this.toDoIndex, 1, toDoObj);\n          // 添加成功之后的提示框\n          ElMessage({\n            message: \"修改记事成功\",\n            center: true,\n            type: \"success\",\n            // offset: 150\n          });\n          // 关闭对话框\n          this.$emit(\"closeDialog\", false);\n        } else {\n          console.log(\"error submit!\");\n          return false;\n        }\n      });\n    },\n    // 清空添加记事表单\n    resetEditToDoForm() {\n      this.$refs.editToDoFormRef.resetFields();\n      this.toDoFormModel.toDoTime = \"\";\n      this.toDoFormModel.tagValue = \"\";\n    },\n    datetime(val) {\n      return moment(val).format(\"YYYY-MM-DD HH:mm:ss\");\n    },\n  },\n  computed: {\n    // 标签选择器\n    toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    },\n    toDoLists() {\n      return store.getters.getSearchToDoLists(store.state.searchContent);\n    },\n    getDefaultTags() {\n      const tagArr1 = this.toDoLists[this.toDoIndex].toDoTags;\n      const tagArr2 = [];\n      for (const item of tagArr1) {\n        tagArr2.push(item.name);\n      }\n      return tagArr2;\n    },\n  },\n  mounted() {\n    this.toDoFormModel = {\n      toDoTitle: this.toDoLists[this.toDoIndex].title,\n      toDoContent: this.toDoLists[this.toDoIndex].content,\n      toDoTime: this.toDoLists[this.toDoIndex].toDoTime,\n      tagValue: this.getDefaultTags\n    };\n\n    this.defaultToDoTime = new Date(this.toDoLists[this.toDoIndex].toDoTime);\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.editToDoDiv {\n  width: 500px;\n  height: 500px;\n  margin: 50px auto;\n}\n.el-button {\n  margin-left: 80px;\n}\n.el-button + .el-button {\n  margin-left: 50px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}