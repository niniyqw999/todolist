{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/yqwwant/.vscode/.vscode/TodoList\\u8BB0\\u4E8B\\u672C/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.date.to-string.js\";\n// import MarkDown from \"@/components/MarkDown.vue\";\nimport store from \"@/store/index.js\";\nimport { ElMessage } from \"element-plus\"; // type FormInstance = InstanceType<typeof ElForm>\n\nexport default {\n  name: \"AddToDo\",\n  data: function data() {\n    return {\n      shortcuts: [{\n        text: \"今天\",\n        value: new Date()\n      }, {\n        text: \"昨天\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24);\n          return date;\n        }\n      }, {\n        text: \"一周前\",\n        value: function value() {\n          var date = new Date();\n          date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n          return date;\n        }\n      }],\n      toDoFormModel: {\n        toDoTitle: \"\",\n        toDoContent: \"\",\n        toDoTime: \"\",\n        tagValue: \"\"\n      },\n      toDoRules: {\n        toDoContent: [{\n          required: true,\n          message: \"内容不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      formSize: \"\"\n    };\n  },\n  store: store,\n  methods: {\n    //  提交添加记事表单\n    submitAddToDoForm: function submitAddToDoForm() {\n      var _this = this;\n\n      if (!this.$refs.addToDoFormRef) {\n        console.log(\"失败\");\n        return;\n      }\n\n      this.$refs.addToDoFormRef.validate(function (valid) {\n        if (valid) {\n          var toDoTags = [];\n\n          var _iterator = _createForOfIteratorHelper(_this.toDoFormModel.tagValue),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              toDoTags.push({\n                name: item\n              });\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          console.log(\"submit!\");\n          store.commit(\"addToDo\", {\n            title: _this.toDoFormModel.toDoTitle,\n            content: _this.toDoFormModel.toDoContent,\n            toDoTime: _this.toDoFormModel.toDoTime,\n            // toDoTags: [{ name: this.toDoFormModel.tagValue }],\n            toDoTags: toDoTags,\n            isCompleted: false,\n            isOutOfTime: false\n          }); // 添加成功之后的提示框\n\n          ElMessage({\n            message: \"添加记事成功\",\n            center: true,\n            type: \"success\" // offset: 150\n\n          }); // 清空表单\n\n          _this.$refs.addToDoFormRef.resetFields();\n\n          _this.toDoFormModel.toDoTime = \"\";\n          _this.toDoFormModel.tagValue = \"\";\n        } else {\n          console.log(\"error submit!\");\n          return false;\n        }\n      }); // this.$refs.addToDoFormRef.validate\n    },\n    // 清空添加记事表单\n    resetAddToDoForm: function resetAddToDoForm() {\n      this.$refs.addToDoFormRef.resetFields();\n      this.toDoFormModel.toDoTime = \"\";\n      this.toDoFormModel.tagValue = \"\";\n    }\n  },\n  computed: {\n    // 标签选择器\n    toDoTagsOptions: function toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["store","ElMessage","name","data","shortcuts","text","value","Date","date","setTime","getTime","toDoFormModel","toDoTitle","toDoContent","toDoTime","tagValue","toDoRules","required","message","trigger","formSize","methods","submitAddToDoForm","$refs","addToDoFormRef","console","log","validate","valid","toDoTags","item","push","commit","title","content","isCompleted","isOutOfTime","center","type","resetFields","resetAddToDoForm","computed","toDoTagsOptions","state"],"sourceRoot":"","sources":["D:\\yqwwant\\.vscode\\.vscode\\TodoList记事本\\src\\components\\AddToDo.vue"],"sourcesContent":["<template>\n  <Transition>\n  <div class=\"addToDoDiv\">\n    <el-form\n      ref=\"addToDoFormRef\"\n      :model=\"toDoFormModel\"\n      :rules=\"toDoRules\"\n      label-width=\"120px\"\n      class=\"toDoForm\"\n      :size=\"formSize\"\n    >\n      <el-form-item label=\"标题\" prop=\"toDoTitle\" class=\"el-form-title\">\n        <el-input\n          v-model=\"toDoFormModel.toDoTitle\"\n          clearable\n          placeholder=\"请输入记事标题\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"内容\" prop=\"toDoContent\">\n        <el-input\n          v-model=\"toDoFormModel.toDoContent\"\n          type=\"textarea\"\n          :autosize=\"{ minRows: 8, maxRows: 15 }\"\n          placeholder=\"请输入记事内容\"\n        >\n        </el-input>\n      </el-form-item>\n      <el-form-item label=\"标签\">\n        <el-select\n          multiple\n          v-model=\"toDoFormModel.tagValue\"\n          class=\"m-2 tagSelect\"\n          placeholder=\"选择标签\"\n          size=\"small\"\n          filterable\n        >\n          <el-option\n            v-for=\"item in toDoTagsOptions\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          >\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"提醒时间\">\n        <el-date-picker\n          v-model=\"toDoFormModel.toDoTime\"\n          type=\"datetime\"\n          placeholder=\"选择时间\"\n          :shortcuts=\"shortcuts\"\n          value-format=\"YYYY-MM-DD hh:mm:ss\"\n        >\n        </el-date-picker>\n      </el-form-item>\n      <el-form-item class=\"el-form-button\">\n        <el-button type=\"primary\" @click=\"submitAddToDoForm()\" class=\"submitBtn\"\n          >添加记事</el-button\n        >\n        <el-button @click=\"resetAddToDoForm()\" class=\"cancelBtn\"\n          >清空</el-button\n        >\n      </el-form-item>\n    </el-form>\n  </div>\n</Transition>\n</template>\n<script>\n// import MarkDown from \"@/components/MarkDown.vue\";\nimport store from \"@/store/index.js\";\nimport { ElMessage } from \"element-plus\";\n// type FormInstance = InstanceType<typeof ElForm>\nexport default {\n  name: \"AddToDo\",\n  data() {\n    return {\n      shortcuts: [\n        {\n          text: \"今天\",\n          value: new Date(),\n        },\n        {\n          text: \"昨天\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24);\n            return date;\n          },\n        },\n        {\n          text: \"一周前\",\n          value: () => {\n            const date = new Date();\n            date.setTime(date.getTime() - 3600 * 1000 * 24 * 7);\n            return date;\n          },\n        },\n      ],\n      toDoFormModel: {\n        toDoTitle: \"\",\n        toDoContent: \"\",\n        toDoTime: \"\",\n        tagValue: \"\",\n      },\n      toDoRules: {\n        toDoContent: [\n          { required: true, message: \"内容不能为空\", trigger: \"blur\" },\n        ],\n      },\n      formSize: \"\",\n    };\n  },\n  store,\n  methods: {\n    //  提交添加记事表单\n    submitAddToDoForm() {\n      if (!this.$refs.addToDoFormRef) {\n        console.log(\"失败\");\n        return;\n      }\n      this.$refs.addToDoFormRef.validate((valid) => {\n        if (valid) {\n          const toDoTags = [];\n          for (const item of this.toDoFormModel.tagValue) {\n            toDoTags.push({ name: item });\n          }\n          console.log(\"submit!\");\n          store.commit(\"addToDo\", {\n            title: this.toDoFormModel.toDoTitle,\n            content: this.toDoFormModel.toDoContent,\n            toDoTime: this.toDoFormModel.toDoTime,\n            // toDoTags: [{ name: this.toDoFormModel.tagValue }],\n            toDoTags: toDoTags,\n            isCompleted: false,\n            isOutOfTime: false,\n          });\n          // 添加成功之后的提示框\n          ElMessage({\n            message: \"添加记事成功\",\n            center: true,\n            type: \"success\",\n            // offset: 150\n          });\n          // 清空表单\n          this.$refs.addToDoFormRef.resetFields();\n          this.toDoFormModel.toDoTime = \"\";\n          this.toDoFormModel.tagValue = \"\";\n        } else {\n          console.log(\"error submit!\");\n          return false;\n        }\n      }); // this.$refs.addToDoFormRef.validate\n    },\n    // 清空添加记事表单\n    resetAddToDoForm() {\n      this.$refs.addToDoFormRef.resetFields();\n      this.toDoFormModel.toDoTime = \"\";\n      this.toDoFormModel.tagValue = \"\";\n    },\n  },\n  computed: {\n    // 标签选择器\n    toDoTagsOptions() {\n      return store.state.toDoTagsOptions;\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.addToDoDiv {\n  width: 500px;\n  height: 500px;\n  margin: 50px auto;\n}\n.toDoForm {\n  width: 100%;\n}\n.el-button {\n  margin-left: 80px;\n}\n.el-button + .el-button {\n  margin-left: 50px;\n}\n\n</style>"]},"metadata":{},"sourceType":"module"}